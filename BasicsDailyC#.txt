#-----------------c#,C Sharp------------------
#basic syntax
#output to console>>Writeand WriteLine
comments >>single line comments and multiple line comments syntax for single line comment //[single line comments]  syntax for multiple line commebnt/* double line comments*/
Variables>>>Syntax type variabelName = value  [type int long,float double ,char string,bool]
Data Types>> int int , long float double char string bool
Type Casting >> Implicit casting>> converting  smaller Type to larger Type
		Explicit Casting>> Converting the Lager Type to Smaller Type 
		Type Convertion Methods >>Convert.ToBoolean() .ToDouble,.ToString,.ToInt32(int),.ToInt64(long)

	 
 UserInput>>  we know the syntax to write line >>>Console.WriteLine();
		Read the from the console is Console.ReadLine();>(But it gives the string )
		If you want read the other type variabel like >int boolen 
			Console.WriteLine("Enter your age:");
			int age = Convert.ToInt32(Console.ReadLine());
			Console.WriteLine("Your age is: " + age);
Operater>> 	AriThematic OperaTer(+,-,*,/,%,++,--);
		Assignment Operater( = ,+=,-= *=,%=, &=,|=,^=, >>=,<<=);
		ComParison Operater(==,>,<,>=,<=,!=)
		Logical Operater(&&,||,!) 
Math function >> Math.Max(value,value);>> returns Maximum value 
		Math.Min(value,value); >>  Minimum Value in that two value
		Math.Sqrt(Value); It gives the squareRoot value
		Math.Abs(value); absolute  positive value
String 	>> A string Variabel contains acollection of Charecters sourounded by Double quotes
		Example string fName = "Muragesh" ;
		Exapmle string lName = "Hipparagi";
		 String Alpabets  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; 
			Alpabets.Length;
			Alpabets.ToUpper();
			Alpabets.ToLower();\
	
	>>String Concatination 
		>Basic Method +  Note (Numbers Are added And Sting Are Concatenated)
		string firstName = "Muragesh";
		string lastName = "Hipparagi";
		string name = firstName + lastName;
		Console.WriteLine(name);
		OutPut//Muragesh Hipparagi
		>> INbilt method 
			String.Concat()
				string firstName = "Muragesh";
				string lastName = "hipparagi";
				string name = string.Concat(firstName, lastName);
				Console.WriteLine(name);
		>>String InterPolation Method
		string fName = "Muragesh";
		string LNmae = "Hiparagi";
		 string name = $"My full name is: {fName} {LName}";
		  Console.WriteLine(name);

	>>Access Strings  
		string nmae = "muragesh";
		 nmae[0]o/p>> m
 		nmae.IndexOf(u);o/p>>1

 boolen dataType  >>bool it gives True or False
		using System;

namespace MyApplication
{
  class Program
  {
    static void Main(string[] args)
    {
      bool isCSharpFun = true;
      bool isFishTasty = false;
      Console.WriteLine(isCSharpFun);   // Outputs True
      Console.WriteLine(isFishTasty);   // Outputs False    
    }
  }
}


 if else>> codition operater see the basics thats it
 Switch>> switch (variabel){ case  break default}
ï»¿using System;
using System.Configuration;
using System.Data.SqlClient;

namespace SampleDataAccessApp
{
    //Write a function to join the data of Employee and Dept and display Employees with DeptName from a database using Connected model and call the function in the Main program.
    class PractiseDemo
    {
        const string query = "Select EmpId, EmpName, EmpAddress, EmpSalary, tblDept.DeptName from tblEmployee inner join tblDept on tblEmployee.DeptId = tblDept.DeptId";
        static readonly string strConnection = ConfigurationManager.ConnectionStrings[1].ConnectionString;
        static void Main(string[] args)
        {
            //displayEmpAndDept();
        }

        private static void displayEmpAndDept()
        {
            var con = new SqlConnection(strConnection);
            var cmd = new SqlCommand(query, con);
            con.Open();
            var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                Console.WriteLine($"{reader["EmpName"]} from {reader["DeptName"]}");
            }
            con.Close();
        }
    }
}
	
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinQExample
{
    class Customer
    {
        public int CustomeId{ get; set; }
        public string   CustomerName{ get; set; }
        public string  CustomerAddress{ get; set; }
    }
    interface IWantMethods
    {
        void CustomerAdd(Customer data);
        void CustomerUpdate(Customer data2);
        void CustomerDelet(int id);
        void CustomerFind(int id);
    }
    class methods : IWantMethods
    {
        public static List<Customer> custmerslist = new List<Customer>();
        public void CustomerAdd(Customer datat)
        {
            custmerslist.Add(datat);
            Console.WriteLine(" Customer Added");
            Console.Clear();
        }
     public   void CustomerDelet(int id)
        {
            throw new NotImplementedException();
        }
        public void CustomerFind(int id)
        {
            for (int i = 0; i < custmerslist.Count; i++)
            {
                var data = custmerslist[i];
                if (id == custmerslist[i].CustomeId)
                {
                    Console.WriteLine($" id{data.CustomeId}, name {data.CustomerName}, address{data.CustomerAddress}");
                    Console.WriteLine(  "done");

                }

            }
            Console.WriteLine("Wrong Id Enterd");   
        }
       public void CustomerUpdate(Customer data2)
        {
            throw new NotImplementedException();
        }

        
    }
   class MainUI
    {
         public static  void MainFunctionforUIINterFace()
        {
            Console.WriteLine("for the add the customer To the List#################>> PRESS 1\n  " +
                "for the Update the customer n_______________ >>PRESS2\n" +
                "for the delet the Customer THough The Id++++++++++++++++++>>PRESS 3\n" +
                "for find the Customer though the ID $$$$$$$$$$$$$$>> PRESS 4\n");
            Console.WriteLine("Enter teh choice ");
            int Choice = int.Parse(Console.ReadLine());
            // Console.WriteLine(Choice);
            while (true)
            {

          
            if (Choice == 1)
            {
                AddTheCustomer();
                    MainFunctionforUIINterFace();


            }
           else if(Choice==2)
            {
                UpdateTheCustomer();
            }
           else if( Choice==3)
            {
                DeletCustomer();
            }
           else if( Choice==4)
            {
                FindCustomer();
            }
            else
            {
                Console.Clear();
            }
            }
        }
    
        private static void DeletCustomer()
        {
            throw new NotImplementedException();
        }

        private static void FindCustomer()
        {
            Console.WriteLine("enter the id you want to find");
            int id = int.Parse(Console.ReadLine());
            methods all = new methods();
            all.CustomerFind(id);
        }

        private static void UpdateTheCustomer()
        {
            throw new NotImplementedException();
        }

        private static void AddTheCustomer()
        {
            methods all = new methods();
            Console.WriteLine("Enter the Customr id ");
            int CustId = int.Parse(Console.ReadLine());
            Console.WriteLine("Enter the Customer Name");
            string Name = Console.ReadLine();
            Console.WriteLine("Enter the Address of the Customer");
            string Address = Console.ReadLine();
            Customer data =  new Customer {CustomeId =CustId,CustomerName=Name,CustomerAddress=Address };
            all.CustomerAdd(data);
            
           
        }
    }

    class CustomerInformation
    {
        static void Main(string[] args)
        {
            MainUI.MainFunctionforUIINterFace();
         }      
    }
}

	
